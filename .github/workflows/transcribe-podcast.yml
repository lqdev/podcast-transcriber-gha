name: Podcast Transcription Workflow

on:
  issues:
    types: [opened]

jobs:
  transcribe:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'transcription') && github.event.issue.user.login == github.repository_owner
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      models: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Install ffmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Process issue and transcribe audio
      id: transcribe
      env:
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_BODY: ${{ github.event.issue.body }}
      run: |
        uv run python github_action_processor.py

    - name: Post-process transcript with GitHub Models
      id: postprocess
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TRANSCRIPT_FILE: ${{ steps.transcribe.outputs.transcript_file }}
      run: |
        uv run python postprocess_transcript.py
        
        # Check if cleaned file was created, fallback to original if not
        if [ ! -f "${{ steps.postprocess.outputs.cleaned_file }}" ]; then
          echo "‚ö†Ô∏è  Cleaned file not found, using original transcript"
          echo "cleaned_file=${{ steps.transcribe.outputs.transcript_file }}" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      id: create_pr
      uses: actions/github-script@v7
      env:
        TRANSCRIPT_FILE: ${{ steps.postprocess.outputs.cleaned_file }}
        ISSUE_TITLE: ${{ steps.transcribe.outputs.title }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get environment variables
          const transcriptFile = process.env.TRANSCRIPT_FILE;
          const issueTitle = process.env.ISSUE_TITLE;
          const issueNumber = process.env.ISSUE_NUMBER;
          
          // Configure git
          await exec.exec('git', ['config', '--local', 'user.email', 'action@github.com']);
          await exec.exec('git', ['config', '--local', 'user.name', 'GitHub Action']);
          
          // Create a new branch
          const branchName = `transcript-issue-${issueNumber}`;
          await exec.exec('git', ['checkout', '-b', branchName]);
          
          // Add the transcript file
          await exec.exec('git', ['add', transcriptFile]);
          
          // Commit changes
          await exec.exec('git', ['commit', '-m', `Add transcript for: ${issueTitle}`]);
          
          // Push branch
          await exec.exec('git', ['push', 'origin', branchName]);
          
          // Create pull request using GitHub API
          try {
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Transcript: ${issueTitle}`,
              body: `This PR contains the auto-generated transcript for issue #${issueNumber}

            **Original Issue:** #${issueNumber}
            **Transcript File:** \`${transcriptFile}\`

            The transcript has been automatically generated using OpenAI Whisper and post-processed with GitHub Models for better readability.

            Closes #${issueNumber}`,
              head: branchName,
              base: 'main'
            });
            
            console.log(`‚úÖ Pull request created: ${pullRequest.html_url}`);
            return { number: pullRequest.number, url: pullRequest.html_url };
          } catch (error) {
            console.error('‚ùå Failed to create pull request:', error);
            throw error;
          }

    - name: Comment on issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üéôÔ∏è **Transcription Complete!**\n\nI\'ve successfully transcribed your podcast episode and created a pull request with the results.\n\n**Next Steps:**\n- Review the generated transcript in the pull request\n- The transcript has been automatically cleaned and formatted\n- Merge the PR when you\'re satisfied with the results\n\nThank you for using the Podcast Transcriber! üöÄ'
          })