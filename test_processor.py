#!/usr/bin/env python3
"""
Test script for local development and debugging of the GitHub Action processor.
"""

import os
import sys
from github_action_processor import process_github_issue, create_transcript_file


def test_issue_processing():
    """Test GitHub issue processing with the new template format."""
    
    # Simulate issue body with new template structure
    test_issue_body = """### Title

Test Episode: AI and Machine Learning

### Audio URL

https://example.com/test-podcast.mp3

### Content

This is a fascinating discussion about AI and machine learning developments.

Key topics covered:
- Neural networks and deep learning
- Applications in real-world scenarios
- Future predictions for AI development

The guests include leading researchers from top universities.
"""
    
    # Set environment variables to simulate GitHub Action context
    os.environ['ISSUE_TITLE'] = '[Transcription] Test Episode Request'
    os.environ['ISSUE_BODY'] = test_issue_body
    
    print("Testing GitHub Issue Processing:")
    print("=" * 50)
    
    try:
        title, url, content = process_github_issue()
        
        print(f"Extracted Title: {title}")
        print(f"Extracted URL: {url}")
        print(f"Extracted Content: {content}")
        
        # Validate extraction
        assert title == "Test Episode: AI and Machine Learning", f"Expected title mismatch: {title}"
        assert url == "https://example.com/test-podcast.mp3", f"Expected URL mismatch: {url}"
        assert "fascinating discussion" in content, f"Content missing expected text: {content}"
        
        print("[PASS] Issue processing test passed!")
        
    except Exception as e:
        print(f"[FAIL] Issue processing test failed: {e}")
        return False
    
    return True


def test_transcript_creation():
    """Test transcript file creation."""
    
    title = "Test Episode: AI and Machine Learning"
    content = """
    This is a fascinating discussion about AI.
    
    Key topics:
    - Neural networks
    - Machine learning applications
    """
    transcript = """
    Welcome to our podcast. Today we're discussing artificial intelligence and machine learning.
    This is a sample transcript that would normally be generated by Whisper.
    """
    
    print("Testing transcript file creation:")
    print("=" * 50)
    
    try:
        filepath = create_transcript_file(title, content, transcript)
        print(f"Created file: {filepath}")
        
        # Read and display the created file
        with open(filepath, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        print(f"\nFile content preview:\n{file_content[:200]}...")
        
        # Validate file content
        assert title in file_content, "Title not found in transcript file"
        assert "Key topics:" in file_content, "Content not found in transcript file" 
        assert "Welcome to our podcast" in file_content, "Transcript not found in transcript file"
        
        print("[PASS] Transcript creation test passed!")
        
    except Exception as e:
        print(f"[FAIL] Transcript creation test failed: {e}")
        return False
    
    return True


def test_url_validation():
    """Test URL validation logic."""
    
    print("Testing URL validation:")
    print("=" * 50)
    
    valid_urls = [
        "https://example.com/podcast.mp3",
        "https://content.libsyn.com/audio.wav",
        "https://anchor.fm/episode.m4a",
        "https://example.com/audio.ogg?param=value"
    ]
    
    invalid_urls = [
        "https://example.com/page.html",
        "https://example.com/video.mp4",
        "not-a-url",
        ""
    ]
    
    audio_extensions = ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.aac']
    
    print("Valid URLs:")
    for url in valid_urls:
        url_lower = url.lower()
        is_audio = any(ext in url_lower for ext in audio_extensions)
        status = "[VALID]" if is_audio else "[INVALID]"
        print(f"  {status} {url}")
    
    print("\nInvalid URLs:")
    for url in invalid_urls:
        url_lower = url.lower()
        is_audio = any(ext in url_lower for ext in audio_extensions)
        status = "[INVALID]" if not is_audio else "[WARNING]"
        print(f"  {status} {url}")
    
    print("[PASS] URL validation test completed!")
    return True


def main():
    """Run all tests."""
    print("GitHub Action Processor Test Suite")
    print("=" * 50)
    
    tests = [
        ("Issue Processing", test_issue_processing),
        ("Transcript Creation", test_transcript_creation),
        ("URL Validation", test_url_validation),
    ]
    
    all_passed = True
    
    for test_name, test_func in tests:
        print(f"\n[TEST] Running {test_name} Test...")
        if not test_func():
            all_passed = False
        print()
    
    print("=" * 50)
    if all_passed:
        print("[SUCCESS] All tests passed!")
    else:
        print("[FAILED] Some tests failed!")
    
    return 0 if all_passed else 1


if __name__ == "__main__":
    sys.exit(main())